(* 
	Candidate no: 181509
 *)




STEPf1 read state {
                    // retrieve individual arguments from list
    CSt := hd state;
    DSt:= hd tl state;
    val := hd tl tl state;
    St:= hd tl tl state;
	P:= hd tl tl tl state;
	B:= hd tl P;
    C:= hd CSt;   // current command on top of Command stack

    d := <isnumber> C;

   if d 
     {
      // do_marker to be executed 
     arg:= hd DSt;
     switch C {
     case @doHd:    DSt:= cons (hd arg) (tl DSt); CSt:= tl CSt
     case @doTl:    DSt:= cons (tl arg) (tl DSt); CSt:= tl CSt
     case @doCons:  arg2:= hd tl DSt; 
                    DSt := cons (cons arg arg2) (tl tl DSt); 
                    CSt:= tl CSt
     case @doAsgn:  X := hd tl CSt; // but we know it's 0 as it's a Wh1Le program  
                    val:= arg ; 
                    DSt:= tl DSt;
                    CSt:= tl tl CSt
     case @doWhile: 
				 Cst := tl Cst;
				 Cst := cons B Cst;
				 Cst := cons arg Cst;
				 val := arg;
				 Dst := tl Dst
			
     case @doIf:   ifc:= hd tl CSt;
     	  	   if arg {
                   B:= hd tl tl ifc // then block to be added to current commands
                   } 
                   else {
		          B:= hd tl tl tl ifc // else block to be added to current commands
		        };
		   CSt:= tl tl CSt;
		            // add the commands of B in right order onto tl Stack;
		    B := <reverse> B; // reverse to get the right order
		    while B
			 { CSt := cons (hd B) CSt;
			   B := tl B
			  };
		    DSt := tl DSt
				 
      }     // end switch
    } // end if do_smth case
   else
    {   // top level command executed that is of shape [op,arg1,â€¦]
     cur_op := hd C; // type of current command
   	 arg := hd tl C;
  	 arg2 := hd tl tl C; 
   	 switch cur_op {
    		case @quote: DSt:= cons arg DSt; CSt:= tl CSt
     		case @var:  DSt := cons val DSt; CSt:= tl CSt
     		case @hd: CSt:= cons arg cons @doHd (tl CSt)
     		case @tl: CSt:= cons arg cons @doTl (tl CSt)
 		case @cons:  CSt := cons arg2 cons arg cons @doCons (tl CSt)                 
 		case @:=: CSt := cons arg2 cons @doAsgn cons arg (tl CSt)                   
                case @while: Cst := cons arg cons @doWhile CSt
		case @if:  CSt:= cons arg cons @doIf CSt     
     } // end switch
  };    // end else

  newState :=  [ CSt, DSt, val, P ]
}
write newState
